// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using graduationProject.Models;

#nullable disable

namespace graduationProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250617193542_FixChallengeDayTaskSchema")]
    partial class FixChallengeDayTaskSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DietPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DietPlans");
                });

            modelBuilder.Entity("Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MuscleGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkoutPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutPlanId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WorkoutPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkoutPlans");
                });

            modelBuilder.Entity("graduationProject.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("graduationProject.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChallengeTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChallengeTitle = "Healthy Habits Challenge",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A 4-level challenge to build better daily habits.",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("graduationProject.Models.ChallengeDayTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Tip")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeDayTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3894),
                            DayNumber = 1,
                            Description = "Drink at least 8 cups of water today.",
                            Level = 1,
                            Tip = "Keep a water bottle with you at all times.",
                            Title = "Drink More Water"
                        },
                        new
                        {
                            Id = 2,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3896),
                            DayNumber = 2,
                            Description = "Take a brisk 20-minute walk.",
                            Level = 1,
                            Tip = "Walking after meals improves digestion.",
                            Title = "Walk 20 Minutes"
                        },
                        new
                        {
                            Id = 3,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3897),
                            DayNumber = 3,
                            Description = "Ensure you get at least 8 hours of sleep.",
                            Level = 1,
                            Tip = "Avoid screens 1 hour before bed.",
                            Title = "Sleep 8 Hours"
                        },
                        new
                        {
                            Id = 4,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3898),
                            DayNumber = 4,
                            Description = "Add at least 2 servings of vegetables to your meals.",
                            Level = 1,
                            Tip = "Try a new vegetable today.",
                            Title = "Eat Vegetables"
                        },
                        new
                        {
                            Id = 5,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3900),
                            DayNumber = 5,
                            Description = "Meditate for 10 minutes to reduce stress.",
                            Level = 1,
                            Tip = "Use a guided meditation app if needed.",
                            Title = "Meditate"
                        },
                        new
                        {
                            Id = 6,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3901),
                            DayNumber = 6,
                            Description = "Avoid added sugar for the whole day.",
                            Level = 1,
                            Tip = "Check food labels carefully.",
                            Title = "No Sugar Day"
                        },
                        new
                        {
                            Id = 7,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3902),
                            DayNumber = 7,
                            Description = "Do 10 minutes of full-body stretching.",
                            Level = 1,
                            Tip = "Focus on breathing while stretching.",
                            Title = "Stretch"
                        },
                        new
                        {
                            Id = 8,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3911),
                            DayNumber = 8,
                            Description = "Drink at least 10 cups of water today.",
                            Level = 2,
                            Tip = "Add lemon for flavor variety.",
                            Title = "Increase Water Intake"
                        },
                        new
                        {
                            Id = 9,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3912),
                            DayNumber = 9,
                            Description = "Take a brisk 30-minute walk or light jog.",
                            Level = 2,
                            Tip = "Try walking in a new location.",
                            Title = "Walk 30 Minutes"
                        },
                        new
                        {
                            Id = 10,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3913),
                            DayNumber = 10,
                            Description = "Sleep 8+ hours with good sleep hygiene.",
                            Level = 2,
                            Tip = "Keep your room cool and dark.",
                            Title = "Quality Sleep"
                        },
                        new
                        {
                            Id = 11,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3915),
                            DayNumber = 11,
                            Description = "Add 3 servings of vegetables to your meals.",
                            Level = 2,
                            Tip = "Include vegetables in every meal.",
                            Title = "More Vegetables"
                        },
                        new
                        {
                            Id = 12,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3916),
                            DayNumber = 12,
                            Description = "Meditate for 15 minutes.",
                            Level = 2,
                            Tip = "Try different meditation techniques.",
                            Title = "Extended Meditation"
                        },
                        new
                        {
                            Id = 13,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3917),
                            DayNumber = 13,
                            Description = "Choose only healthy snacks today.",
                            Level = 2,
                            Tip = "Prepare snacks in advance.",
                            Title = "Healthy Snacks"
                        },
                        new
                        {
                            Id = 14,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3918),
                            DayNumber = 14,
                            Description = "Do 15 minutes of yoga or stretching.",
                            Level = 2,
                            Tip = "Focus on flexibility and relaxation.",
                            Title = "Yoga Flow"
                        },
                        new
                        {
                            Id = 15,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3921),
                            DayNumber = 15,
                            Description = "Drink water before every meal.",
                            Level = 3,
                            Tip = "This helps with digestion and portion control.",
                            Title = "Hydration Challenge"
                        },
                        new
                        {
                            Id = 16,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3923),
                            DayNumber = 16,
                            Description = "Do 40 minutes of moderate cardio.",
                            Level = 3,
                            Tip = "Mix different activities to stay engaged.",
                            Title = "Cardio Boost"
                        },
                        new
                        {
                            Id = 17,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3924),
                            DayNumber = 17,
                            Description = "Create the perfect sleep environment.",
                            Level = 3,
                            Tip = "Remove all electronic devices from bedroom.",
                            Title = "Sleep Optimization"
                        },
                        new
                        {
                            Id = 18,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3925),
                            DayNumber = 18,
                            Description = "Eat only plant-based foods today.",
                            Level = 3,
                            Tip = "Explore new plant-based recipes.",
                            Title = "Plant-Based Day"
                        },
                        new
                        {
                            Id = 19,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3926),
                            DayNumber = 19,
                            Description = "Practice mindfulness for 20 minutes.",
                            Level = 3,
                            Tip = "Try walking meditation outdoors.",
                            Title = "Mindfulness Practice"
                        },
                        new
                        {
                            Id = 20,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3928),
                            DayNumber = 20,
                            Description = "Avoid processed foods completely.",
                            Level = 3,
                            Tip = "Focus on whole, natural foods.",
                            Title = "Detox Day"
                        },
                        new
                        {
                            Id = 21,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3929),
                            DayNumber = 21,
                            Description = "Combine strength training with yoga.",
                            Level = 3,
                            Tip = "Balance is key to overall fitness.",
                            Title = "Strength & Flexibility"
                        },
                        new
                        {
                            Id = 22,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3932),
                            DayNumber = 22,
                            Description = "Perfect your daily hydration routine.",
                            Level = 4,
                            Tip = "Track your intake and adjust as needed.",
                            Title = "Ultimate Hydration"
                        },
                        new
                        {
                            Id = 23,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3933),
                            DayNumber = 23,
                            Description = "Do your most challenging workout yet.",
                            Level = 4,
                            Tip = "Push your limits safely.",
                            Title = "Peak Performance"
                        },
                        new
                        {
                            Id = 24,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3934),
                            DayNumber = 24,
                            Description = "Prioritize rest and recovery.",
                            Level = 4,
                            Tip = "Listen to your body's needs.",
                            Title = "Recovery Focus"
                        },
                        new
                        {
                            Id = 25,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3936),
                            DayNumber = 25,
                            Description = "Create the perfect nutrition day.",
                            Level = 4,
                            Tip = "Plan every meal mindfully.",
                            Title = "Nutritional Excellence"
                        },
                        new
                        {
                            Id = 26,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3937),
                            DayNumber = 26,
                            Description = "Focus on the connection between mind and body.",
                            Level = 4,
                            Tip = "Combine meditation with movement.",
                            Title = "Mind-Body Connection"
                        },
                        new
                        {
                            Id = 27,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3938),
                            DayNumber = 27,
                            Description = "Integrate all healthy habits seamlessly.",
                            Level = 4,
                            Tip = "Make healthy choices feel natural.",
                            Title = "Lifestyle Integration"
                        },
                        new
                        {
                            Id = 28,
                            ChallengeId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 19, 35, 41, 815, DateTimeKind.Utc).AddTicks(3939),
                            DayNumber = 28,
                            Description = "Celebrate your achievement and plan ahead.",
                            Level = 4,
                            Tip = "Reflect on your journey and set new goals.",
                            Title = "Challenge Complete"
                        });
                });

            modelBuilder.Entity("graduationProject.Models.GeneratedDietPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("GeneratedDietPlans");
                });

            modelBuilder.Entity("graduationProject.Models.GeneratedWorkoutPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("GeneratedWorkoutPlans");
                });

            modelBuilder.Entity("graduationProject.Models.MuscleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MuscleGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ARM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ABS"
                        },
                        new
                        {
                            Id = 4,
                            Name = "LEG"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Back & Shoulder"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Stretches"
                        });
                });

            modelBuilder.Entity("graduationProject.Models.NutritionalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("NutritionalInfos");
                });

            modelBuilder.Entity("graduationProject.Models.StructuredDietPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PlanJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("StructuredDietPlans");
                });

            modelBuilder.Entity("graduationProject.Models.StructuredWorkoutPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PlanJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("StructuredWorkoutPlans");
                });

            modelBuilder.Entity("graduationProject.Models.UserChallengeProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompletedDaysJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentDay")
                        .HasColumnType("int");

                    b.Property<int>("CurrentLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserChallengeProgress");
                });

            modelBuilder.Entity("graduationProject.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DietaryRestrictions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FitnessLevel")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Goal")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("MedicalConditions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PreferredDiet")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeeklyWorkoutDays")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<string>("WorkoutDuration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("graduationProject.Models.nExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MuscleGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("nExercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "https://img.youtube.com/vi/3DH2fwV5u1k/maxresdefault.jpg",
                            MuscleGroupId = 1,
                            Name = "Overhead Extension",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/3DH2fwV5u1k"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "https://img.youtube.com/vi/SNFj4cBJ6ds/maxresdefault.jpg",
                            MuscleGroupId = 1,
                            Name = "Dumbbell Press",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/SNFj4cBJ6ds"
                        },
                        new
                        {
                            Id = 3,
                            Icon = "https://img.youtube.com/vi/tPAkjMLWvCY/maxresdefault.jpg",
                            MuscleGroupId = 1,
                            Name = "Tricep Dips",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/tPAkjMLWvCY"
                        },
                        new
                        {
                            Id = 4,
                            Icon = "https://img.youtube.com/vi/sz_BVxduUWE/maxresdefault.jpg",
                            MuscleGroupId = 1,
                            Name = "Dumbbell Pullover",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/sz_BVxduUWE"
                        },
                        new
                        {
                            Id = 5,
                            Icon = "https://img.youtube.com/vi/dsRNsZHuUkw/maxresdefault.jpg",
                            MuscleGroupId = 1,
                            Name = "Concentration Curl",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/dsRNsZHuUkw"
                        },
                        new
                        {
                            Id = 6,
                            Icon = "https://img.youtube.com/vi/BneGVmsYBTY/maxresdefault.jpg",
                            MuscleGroupId = 1,
                            Name = "Cable Reverse",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/BneGVmsYBTY"
                        },
                        new
                        {
                            Id = 7,
                            Icon = "https://img.youtube.com/vi/KVT2n9CpqRU/maxresdefault.jpg",
                            MuscleGroupId = 2,
                            Name = "Cable Crossovers",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/KVT2n9CpqRU"
                        },
                        new
                        {
                            Id = 8,
                            Icon = "https://img.youtube.com/vi/W1qukYP2FLA/maxresdefault.jpg",
                            MuscleGroupId = 2,
                            Name = "Chest Press",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/W1qukYP2FLA"
                        },
                        new
                        {
                            Id = 9,
                            Icon = "https://img.youtube.com/vi/WU_AUjGaHnM/maxresdefault.jpg",
                            MuscleGroupId = 2,
                            Name = "Dumbbell Chest",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/WU_AUjGaHnM"
                        },
                        new
                        {
                            Id = 10,
                            Icon = "https://img.youtube.com/vi/OAps0BeSd7Y/maxresdefault.jpg",
                            MuscleGroupId = 2,
                            Name = "Dumbbell Fly",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/OAps0BeSd7Y"
                        },
                        new
                        {
                            Id = 11,
                            Icon = "https://img.youtube.com/vi/mATfjUjXr60/maxresdefault.jpg",
                            MuscleGroupId = 2,
                            Name = "Band Bench Press",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/mATfjUjXr60"
                        },
                        new
                        {
                            Id = 12,
                            Icon = "https://img.youtube.com/vi/WfFWsolPlP8/maxresdefault.jpg",
                            MuscleGroupId = 3,
                            Name = "Weighted Crunch",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/WfFWsolPlP8"
                        },
                        new
                        {
                            Id = 13,
                            Icon = "https://img.youtube.com/vi/cK2VIjqK4PY/maxresdefault.jpg",
                            MuscleGroupId = 3,
                            Name = "Rotating Stomach",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/cK2VIjqK4PY?si=-JIDMS5GRjBU_2PI"
                        },
                        new
                        {
                            Id = 14,
                            Icon = "https://img.youtube.com/vi/iZOAVk8qjjU/maxresdefault.jpg",
                            MuscleGroupId = 3,
                            Name = "Cable Crunch",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/iZOAVk8qjjU"
                        },
                        new
                        {
                            Id = 15,
                            Icon = "https://img.youtube.com/vi/jZYon72vEtU/maxresdefault.jpg",
                            MuscleGroupId = 3,
                            Name = "Leg Reverse Crunch",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/jZYon72vEtU"
                        },
                        new
                        {
                            Id = 16,
                            Icon = "https://img.youtube.com/vi/-uQO2gG8sjk/maxresdefault.jpg",
                            MuscleGroupId = 3,
                            Name = " Seated Crunch",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/-uQO2gG8sjk"
                        },
                        new
                        {
                            Id = 17,
                            Icon = "https://img.youtube.com/vi/1SaYpphpQ5w/maxresdefault.jpg",
                            MuscleGroupId = 4,
                            Name = "Leg Curl",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/1SaYpphpQ5w"
                        },
                        new
                        {
                            Id = 18,
                            Icon = "https://img.youtube.com/vi/weVucBtUl7I/maxresdefault.jpg",
                            MuscleGroupId = 4,
                            Name = "Low Bar Squat",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/weVucBtUl7I"
                        },
                        new
                        {
                            Id = 19,
                            Icon = "https://img.youtube.com/vi/aL3VFTD_4ew/maxresdefault.jpg",
                            MuscleGroupId = 4,
                            Name = "Smith Deadlift",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/aL3VFTD_4ew"
                        },
                        new
                        {
                            Id = 20,
                            Icon = "https://img.youtube.com/vi/myNurJqfgDc/maxresdefault.jpg",
                            MuscleGroupId = 4,
                            Name = "Leg Press",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/myNurJqfgDc"
                        },
                        new
                        {
                            Id = 21,
                            Icon = "https://img.youtube.com/vi/qvCOYW80akQ/maxresdefault.jpg",
                            MuscleGroupId = 4,
                            Name = "Standing Calf Raises",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/qvCOYW80akQ"
                        },
                        new
                        {
                            Id = 22,
                            Icon = "https://img.youtube.com/vi/33sUKgU3yjI/maxresdefault.jpg",
                            MuscleGroupId = 4,
                            Name = "Hip Abduction",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/33sUKgU3yjI"
                        },
                        new
                        {
                            Id = 23,
                            Icon = "https://img.youtube.com/vi/hghkuX7ejVo/maxresdefault.jpg",
                            MuscleGroupId = 4,
                            Name = "Hip Thrusts",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/hghkuX7ejVo"
                        },
                        new
                        {
                            Id = 24,
                            Icon = "https://img.youtube.com/vi/2Zbv0h5OA3I/maxresdefault.jpg",
                            MuscleGroupId = 4,
                            Name = "Barbell Lunge",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/2Zbv0h5OA3I"
                        },
                        new
                        {
                            Id = 25,
                            Icon = "https://img.youtube.com/vi/EQZvNNjCCPM/maxresdefault.jpg",
                            MuscleGroupId = 5,
                            Name = "Cable Elevated Row",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/EQZvNNjCCPM"
                        },
                        new
                        {
                            Id = 26,
                            Icon = "https://img.youtube.com/vi/T-wcu8iRSW4/maxresdefault.jpg",
                            MuscleGroupId = 5,
                            Name = "Cable Arm Pulldown",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/T-wcu8iRSW4"
                        },
                        new
                        {
                            Id = 27,
                            Icon = "https://img.youtube.com/vi/XsN8glqhebU/maxresdefault.jpg",
                            MuscleGroupId = 5,
                            Name = "Reverse Fly",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/XsN8glqhebU"
                        },
                        new
                        {
                            Id = 28,
                            Icon = "https://img.youtube.com/vi/LGjNc2nKYsk/maxresdefault.jpg",
                            MuscleGroupId = 5,
                            Name = "Lying T Bar Back",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/LGjNc2nKYsk"
                        },
                        new
                        {
                            Id = 29,
                            Icon = "https://img.youtube.com/vi/imkOFyqxNUc/maxresdefault.jpg",
                            MuscleGroupId = 5,
                            Name = "Cable Pulldown",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/imkOFyqxNUc"
                        },
                        new
                        {
                            Id = 30,
                            Icon = "https://img.youtube.com/vi/anxZfYAXmsY/maxresdefault.jpg",
                            MuscleGroupId = 5,
                            Name = "Dumbbell Press",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/anxZfYAXmsY"
                        },
                        new
                        {
                            Id = 31,
                            Icon = "https://img.youtube.com/vi/U79gWoPFNMU/maxresdefault.jpg",
                            MuscleGroupId = 5,
                            Name = "Cuban Press",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/U79gWoPFNMU"
                        },
                        new
                        {
                            Id = 32,
                            Icon = "https://img.youtube.com/vi/BEazZDwwns0/maxresdefault.jpg",
                            MuscleGroupId = 5,
                            Name = "Raise Plate",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/BEazZDwwns0"
                        },
                        new
                        {
                            Id = 33,
                            Icon = "https://img.youtube.com/vi/YkvgWqV9SuU/maxresdefault.jpg",
                            MuscleGroupId = 6,
                            Name = "Lying Cross Over",
                            Sets = "3*12",
                            VideoUrl = "https://www.youtube.com/embed/YkvgWqV9SuU"
                        },
                        new
                        {
                            Id = 34,
                            Icon = "https://img.youtube.com/vi/UzLl2wWApDM/maxresdefault.jpg",
                            MuscleGroupId = 6,
                            Name = "Crouching Heel Stretch",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/UzLl2wWApDM"
                        },
                        new
                        {
                            Id = 35,
                            Icon = "https://img.youtube.com/vi/1qVP0Sz-jhE/maxresdefault.jpg",
                            MuscleGroupId = 6,
                            Name = "Kneeling Toe Up Stretch",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/1qVP0Sz-jhE"
                        },
                        new
                        {
                            Id = 36,
                            Icon = "https://img.youtube.com/vi/sJ7FLxLCqe8/maxresdefault.jpg",
                            MuscleGroupId = 6,
                            Name = "Single Lean Back Stretch",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/sJ7FLxLCqe8"
                        },
                        new
                        {
                            Id = 37,
                            Icon = "https://img.youtube.com/vi/W-4JfmbiEl8/maxresdefault.jpg",
                            MuscleGroupId = 6,
                            Name = "Back Pec Stretch",
                            Sets = "3*10",
                            VideoUrl = "https://www.youtube.com/embed/W-4JfmbiEl8"
                        });
                });

            modelBuilder.Entity("Exercise", b =>
                {
                    b.HasOne("WorkoutPlan", null)
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutPlanId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("graduationProject.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("graduationProject.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graduationProject.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("graduationProject.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("graduationProject.Models.ChallengeDayTask", b =>
                {
                    b.HasOne("graduationProject.Models.Challenge", "Challenge")
                        .WithMany("DayTasks")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("graduationProject.Models.GeneratedDietPlan", b =>
                {
                    b.HasOne("graduationProject.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("graduationProject.Models.GeneratedWorkoutPlan", b =>
                {
                    b.HasOne("graduationProject.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("graduationProject.Models.NutritionalInfo", b =>
                {
                    b.HasOne("graduationProject.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("graduationProject.Models.StructuredDietPlan", b =>
                {
                    b.HasOne("graduationProject.Models.UserProfile", "UserProfile")
                        .WithMany("StructuredDietPlans")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("graduationProject.Models.StructuredWorkoutPlan", b =>
                {
                    b.HasOne("graduationProject.Models.UserProfile", "UserProfile")
                        .WithMany("StructuredWorkoutPlans")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("graduationProject.Models.UserChallengeProgress", b =>
                {
                    b.HasOne("graduationProject.Models.Challenge", "Challenge")
                        .WithMany("UserProgress")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("graduationProject.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("graduationProject.Models.UserProfile", b =>
                {
                    b.HasOne("graduationProject.Models.AppUser", "AppUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("graduationProject.Models.UserProfile", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("graduationProject.Models.nExercise", b =>
                {
                    b.HasOne("graduationProject.Models.MuscleGroup", "MuscleGroup")
                        .WithMany("nExercises")
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("WorkoutPlan", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("graduationProject.Models.AppUser", b =>
                {
                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("graduationProject.Models.Challenge", b =>
                {
                    b.Navigation("DayTasks");

                    b.Navigation("UserProgress");
                });

            modelBuilder.Entity("graduationProject.Models.MuscleGroup", b =>
                {
                    b.Navigation("nExercises");
                });

            modelBuilder.Entity("graduationProject.Models.UserProfile", b =>
                {
                    b.Navigation("StructuredDietPlans");

                    b.Navigation("StructuredWorkoutPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
